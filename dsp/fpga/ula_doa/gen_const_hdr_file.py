import numpy as np
import os
import ctypes

cwd = os.path.dirname(__file__)
output_dir = os.path.abspath(os.path.join(cwd, "autogenerated"))
os.makedirs(output_dir, exist_ok=True)

rx1_phase_cal = 0
rx2_phase_cal = 0
rx3_phase_cal = 0
rx4_phase_cal = 0

phi_scan_step = 3
phi_scan_min = -30 # inclusive
phi_scan_max = 31 # exclusive
phi_scan_max -= 1 # don't touch

d = 0.5
signal_freq = 2.44e9

c = 299792458
lambda_ = c / signal_freq
steering_angles = np.arange(phi_scan_min, phi_scan_max+1, phi_scan_step)
phi_scan_len = len(steering_angles)
steervec = lambda n, cal: np.exp(-1j * (np.pi * n * np.sin(np.deg2rad(steering_angles)) + np.deg2rad(cal)))
steering_vectors = np.asarray([ # (antenna, scan angle)
        steervec(0, rx1_phase_cal),
        steervec(1, rx2_phase_cal),
        steervec(2, rx3_phase_cal),
        steervec(3, rx4_phase_cal)])
# fixed point
I_steering_vectors_fp = np.real(steering_vectors*0x7ff).astype(np.int16)
Q_steering_vectors_fp = np.imag(steering_vectors*0x7ff).astype(np.int16)

for i_ant, (Is, Qs) in enumerate(zip(I_steering_vectors_fp, Q_steering_vectors_fp)):
    ant = i_ant+1
    with open(os.path.join(output_dir, f"I_steervecs_{ant}.hex"), "w") as f:
        for I in Is:
            f.write(hex(ctypes.c_ushort(I).value).replace("0x", "") + "\n")
    with open(os.path.join(output_dir, f"Q_steervecs_{ant}.hex"), "w") as f:
        for Q in Qs:
            f.write(hex(ctypes.c_ushort(Q).value).replace("0x", "") + "\n")
